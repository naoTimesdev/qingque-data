from __future__ import annotations

import functools
from dataclasses import dataclass
from typing import TypedDict

import orjson
from sr_common import ROOT_DIR, Hashable, get_available_languages, get_hash_content, load_all_languages

CUTSCENE_CAPTIONS = ROOT_DIR / "config" / "CutSceneCaption"
SUBS_DIR = ROOT_DIR / "generated" / "subtitles"
SUBS_DIR.mkdir(exist_ok=True)

ASS_FILE_HEADER = """[Script Info]
; Subtitle generated by Qingque-data scripting
; Created by @noaione, https://github.com/naoTimesdev/qingque-data
Title: {TITLE}
ScriptType: v4.00+
WrapStyle: 0
ScaledBorderAndShadow: yes
YCbCr Matrix: None
PlayResX: 2560
PlayResY: 1440

[V4+ Styles]
Format: Name, Fontname, Fontsize, PrimaryColour, SecondaryColour, OutlineColour, BackColour, Bold, Italic, Underline, StrikeOut, ScaleX, ScaleY, Spacing, Angle, BorderStyle, Outline, Shadow, Alignment, MarginL, MarginR, MarginV, Encoding
Style: Default,Calibri,82,&H00FFFFFF,&H000000FF,&H00000000,&H00000000,-1,0,0,0,100,100,0,0,1,4,0,2,60,60,45,1

[Events]
Format: Layer, Start, End, Style, Name, MarginL, MarginR, MarginV, Effect, Text
"""  # noqa: E501


class _CaptionLine(TypedDict):
    CaptionTextID: Hashable
    # In seconds
    StartTime: float
    EndTime: float


class _Captions(TypedDict):
    CaptionList: list[_CaptionLine]


def ms_to_cs(miliseconds: int):
    ms_str = str(miliseconds)
    if len(ms_str) == 2:
        round_up = 1 if int(ms_str[1]) >= 5 else 0
        number = int(ms_str[0]) + round_up
        if number >= 10:
            return "10"
        return f"0{number}"

    # 3 digits, use first two and ignore rounding
    return ms_str[:2]


def seconds_to_ass_time(seconds: float) -> str:
    hh = int(seconds / 3600)
    mm = int((seconds - hh * 3600) / 60)
    ss = int(seconds - hh * 3600 - mm * 60)
    ms = int((seconds - hh * 3600 - mm * 60 - ss) * 1000)
    return f"{hh:02}:{mm:02}:{ss:02}.{ms_to_cs(ms)}"


@dataclass
class ASSLine:
    start_time: float
    end_time: float
    text: str

    def make(self):
        start = seconds_to_ass_time(self.start_time)
        end = seconds_to_ass_time(self.end_time)
        return f"Dialogue: 0,{start},{end},Default,,0,0,0,,{self.text}"


def process_single_line(line: _CaptionLine, lang: str) -> ASSLine:
    text = get_hash_content_with(line["CaptionTextID"], lang)
    return ASSLine(line["StartTime"], line["EndTime"], text)


def main_loader():
    for captions in CUTSCENE_CAPTIONS.glob("*.json"):
        print(f" Processing {captions.stem}...")
        captions_data: _Captions = orjson.loads(captions.read_bytes())
        for lang in get_available_languages():
            SUBS_LANG_DIR = SUBS_DIR / lang
            SUBS_LANG_DIR.mkdir(exist_ok=True)
            ass_line: list[ASSLine] = []
            for line in captions_data["CaptionList"]:
                ass_line.append(process_single_line(line, lang))
            subs_file = SUBS_LANG_DIR / f"{captions.stem}.ass"
            with subs_file.open("w") as fp:
                fp.write(ASS_FILE_HEADER.format(TITLE=f"{captions.stem} - {lang.upper()}"))
                fp.write("\n".join(line.make() for line in ass_line))


if __name__ == "__main__":
    print("Loading lang assets...")
    LANG_ASSETS = load_all_languages()
    get_hash_content_with = functools.partial(get_hash_content, lang_assets=LANG_ASSETS)
    main_loader()
